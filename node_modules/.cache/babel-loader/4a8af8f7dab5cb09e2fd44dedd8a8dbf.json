{"ast":null,"code":"import _defineProperty from \"/Users/josh/Projects/symbiome/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/josh/Projects/symbiome/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/josh/Projects/symbiome/src/components/Survey/Survey.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer, useRef, useEffect } from 'react';\nimport { Carousel, CarouselItem, Row, Col, Input } from 'reactstrap';\nimport { IoMdArrowDown } from 'react-icons/io';\nimport SurveyActions from './SurveyActions'; // Component for the survey slide\n\nvar SurveyStep = function SurveyStep(_ref) {\n  var index = _ref.index,\n      step = _ref.step,\n      state = _ref.state,\n      dispatch = _ref.dispatch;\n  var sentinelRef = useRef(null);\n  var observerRef = useRef(null);\n  var Component = step.component; // Handles observation of the sentinel so we can know when scrolling is possible\n\n  useEffect(function () {\n    if (state.currentStep !== index) {\n      return;\n    }\n\n    if (observerRef.current === null) {\n      observerRef.current = new IntersectionObserver(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 1),\n            entry = _ref3[0];\n\n        if (entry) {\n          dispatch({\n            type: 'SCROLLING',\n            index: index,\n            value: !entry.isIntersecting\n          });\n        }\n      });\n    }\n\n    var observer = observerRef.current;\n    observer.observe(sentinelRef.current);\n    return function () {\n      return observer.disconnect();\n    };\n  }, [state.currentStep, index, dispatch]);\n  return React.createElement(\"div\", {\n    className: \"survey__right--content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Component, {\n    index: index,\n    step: step,\n    state: state.data[index],\n    dispatch: dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    ref: sentinelRef,\n    className: \"survey__sentinel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }));\n};\n\nvar Survey = React.memo(function (_ref4) {\n  var surveyId = _ref4.surveyId,\n      surveySteps = _ref4.surveySteps;\n\n  // Survey state reducer\n  var _useReducer = useReducer(function (state, action) {\n    switch (action.type) {\n      case 'NEXT':\n        return _objectSpread({}, state, {\n          currentStep: state.currentStep + 1 === surveySteps.length ? state.currentStep : state.currentStep + 1\n        });\n\n      case 'BACK':\n        return _objectSpread({}, state, {\n          currentStep: state.currentStep === 0 ? state.currentStep : state.currentStep - 1\n        });\n\n      case 'UPDATE':\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, action.index, action.payload))\n        });\n\n      case 'CLEAR':\n        var data = state.data;\n        delete data[state.currentStep];\n        return _objectSpread({}, state, {\n          data: data\n        });\n\n      case 'SCROLLING':\n        return _objectSpread({}, state, {\n          scrollable: _objectSpread({}, state.scrollable, _defineProperty({}, action.index, action.value))\n        });\n\n      default:\n        return state;\n    }\n  }, {\n    currentStep: 0,\n    scrollable: {},\n    data: {}\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1]; // Get the current survey step information\n\n\n  var currentState = state.data[state.currentStep];\n  var currentStep = surveySteps[state.currentStep]; // Handle submission of the survey (the final step)\n\n  function onSubmit() {\n    // TODO: User registration\n    var params = {\n      responses: []\n    };\n    Object.keys(state.data).forEach(function (key) {\n      // Add any `additional_information` added from a survey step\n      var _map = [state.data[key]].map(function (data) {\n        if ('additional_information' in data) {\n          var _data$additional_info = data.additional_information,\n              optionKey = _data$additional_info.key,\n              optionValue = _data$additional_info.value;\n          data.step_values[data.step_values.indexOf(optionKey)] = \"\".concat(optionKey, \" - \").concat(optionValue);\n          delete data.additional_information;\n        }\n\n        return data;\n      }),\n          _map2 = _slicedToArray(_map, 1),\n          mappedData = _map2[0];\n\n      params.responses.push(mappedData);\n    });\n    console.log('sending the following data structure:', params);\n  } // Handle text input on the textarea\n\n\n  function onChange(event) {\n    dispatch({\n      type: 'UPDATE',\n      index: state.currentStep,\n      payload: _objectSpread({}, currentState, {\n        additional_information: {\n          key: currentStep.textAreaOption,\n          value: event.target.value\n        }\n      })\n    });\n  }\n\n  return React.createElement(Row, {\n    className: \"survey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(Col, {\n    md: \"5\",\n    className: \"survey__left\",\n    style: {\n      backgroundImage: \"url(\".concat(currentStep.backgroundImage, \")\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"survey__left--step\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, state.currentStep + 1, \"/\", surveySteps.length), React.createElement(\"h1\", {\n    className: \"survey__left--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, currentStep.questionText), React.createElement(\"p\", {\n    className: \"survey__left--footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Complete the survey and get up to 6 months of free, bespoke skincare\")), React.createElement(Col, {\n    md: \"7\",\n    className: \"survey__right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(Carousel, {\n    activeIndex: state.currentStep,\n    next: function next() {},\n    previous: function previous() {},\n    keyboard: false,\n    pause: false,\n    interval: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, surveySteps.map(function (step, index) {\n    return React.createElement(CarouselItem, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(SurveyStep, {\n      index: index,\n      step: step,\n      state: state,\n      dispatch: dispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }));\n  })), state.scrollable[state.currentStep] && React.createElement(\"div\", {\n    className: \"survey__right--scroll\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Scroll for more\", React.createElement(IoMdArrowDown, {\n    size: \"16\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  })), currentStep.hasTextArea && currentStep.isTextAreaVisible(currentState) && React.createElement(\"div\", {\n    class: \"survey__right--textarea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"textarea\",\n    placeholder: \"Tell us more...\",\n    value: currentState && currentState.additional_information ? currentState.additional_information.value : '',\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  })), React.createElement(SurveyActions, {\n    dispatch: dispatch,\n    canGoBack: state.currentStep > 0,\n    canGoNext: currentStep.isValid(currentState),\n    canClear: currentState !== undefined,\n    clearText: currentStep.clearText ? currentStep.clearText : 'Clear selection',\n    isLastPage: state.currentStep + 1 === surveySteps.length,\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  })));\n});\nexport default Survey;","map":{"version":3,"sources":["/Users/josh/Projects/symbiome/src/components/Survey/Survey.js"],"names":["React","useReducer","useRef","useEffect","Carousel","CarouselItem","Row","Col","Input","IoMdArrowDown","SurveyActions","SurveyStep","index","step","state","dispatch","sentinelRef","observerRef","Component","component","currentStep","current","IntersectionObserver","entry","type","value","isIntersecting","observer","observe","disconnect","data","Survey","memo","surveyId","surveySteps","action","length","payload","scrollable","currentState","onSubmit","params","responses","Object","keys","forEach","key","map","additional_information","optionKey","optionValue","step_values","indexOf","mappedData","push","console","log","onChange","event","textAreaOption","target","backgroundImage","questionText","hasTextArea","isTextAreaVisible","isValid","undefined","clearText"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,MAA3B,EAAmCC,SAAnC,QAAmD,OAAnD;AACA,SAAQC,QAAR,EAAkBC,YAAlB,EAAgCC,GAAhC,EAAqCC,GAArC,EAA0CC,KAA1C,QAAsD,YAAtD;AACA,SAAQC,aAAR,QAA4B,gBAA5B;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CAEA;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAsC;AAAA,MAAnCC,KAAmC,QAAnCA,KAAmC;AAAA,MAA5BC,IAA4B,QAA5BA,IAA4B;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACrD,MAAMC,WAAW,GAAGd,MAAM,CAAC,IAAD,CAA1B;AACA,MAAMe,WAAW,GAAGf,MAAM,CAAC,IAAD,CAA1B;AACA,MAAMgB,SAAS,GAAGL,IAAI,CAACM,SAAvB,CAHqD,CAKrD;;AACAhB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIW,KAAK,CAACM,WAAN,KAAsBR,KAA1B,EAAiC;AAAE;AAAQ;;AAE3C,QAAIK,WAAW,CAACI,OAAZ,KAAwB,IAA5B,EAAkC;AAC9BJ,MAAAA,WAAW,CAACI,OAAZ,GAAsB,IAAIC,oBAAJ,CAAyB,iBAAa;AAAA;AAAA,YAAXC,KAAW;;AACxD,YAAIA,KAAJ,EAAW;AACPR,UAAAA,QAAQ,CAAC;AAAES,YAAAA,IAAI,EAAE,WAAR;AAAqBZ,YAAAA,KAAK,EAALA,KAArB;AAA4Ba,YAAAA,KAAK,EAAE,CAACF,KAAK,CAACG;AAA1C,WAAD,CAAR;AACH;AACJ,OAJqB,CAAtB;AAKH;;AACD,QAAMC,QAAQ,GAAGV,WAAW,CAACI,OAA7B;AACAM,IAAAA,QAAQ,CAACC,OAAT,CAAiBZ,WAAW,CAACK,OAA7B;AACA,WAAO;AAAA,aAAMM,QAAQ,CAACE,UAAT,EAAN;AAAA,KAAP;AACH,GAbQ,EAaN,CAACf,KAAK,CAACM,WAAP,EAAoBR,KAApB,EAA2BG,QAA3B,CAbM,CAAT;AAeA,SACI;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAEH,KADX;AAEI,IAAA,IAAI,EAAEC,IAFV;AAGI,IAAA,KAAK,EAAEC,KAAK,CAACgB,IAAN,CAAWlB,KAAX,CAHX;AAII,IAAA,QAAQ,EAAEG,QAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAUI;AAAK,IAAA,GAAG,EAAEC,WAAV;AAAuB,IAAA,SAAS,EAAC,kBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CADJ;AAcH,CAnCD;;AAqCA,IAAMe,MAAM,GAAG/B,KAAK,CAACgC,IAAN,CAAW,iBAA+B;AAAA,MAA5BC,QAA4B,SAA5BA,QAA4B;AAAA,MAAlBC,WAAkB,SAAlBA,WAAkB;;AACrD;AADqD,oBAE3BjC,UAAU,CAAC,UAACa,KAAD,EAAQqB,MAAR,EAAmB;AACpD,YAAQA,MAAM,CAACX,IAAf;AACI,WAAK,MAAL;AACI,iCACOV,KADP;AAEIM,UAAAA,WAAW,EAAGN,KAAK,CAACM,WAAN,GAAoB,CAArB,KAA4Bc,WAAW,CAACE,MAAxC,GAAiDtB,KAAK,CAACM,WAAvD,GAAqEN,KAAK,CAACM,WAAN,GAAoB;AAF1G;;AAIJ,WAAK,MAAL;AACI,iCACON,KADP;AAEIM,UAAAA,WAAW,EAAEN,KAAK,CAACM,WAAN,KAAsB,CAAtB,GAA0BN,KAAK,CAACM,WAAhC,GAA8CN,KAAK,CAACM,WAAN,GAAoB;AAFnF;;AAIJ,WAAK,QAAL;AACI,iCAAWN,KAAX;AAAkBgB,UAAAA,IAAI,oBAAMhB,KAAK,CAACgB,IAAZ,sBAAmBK,MAAM,CAACvB,KAA1B,EAAkCuB,MAAM,CAACE,OAAzC;AAAtB;;AACJ,WAAK,OAAL;AACI,YAAMP,IAAI,GAAGhB,KAAK,CAACgB,IAAnB;AACA,eAAOA,IAAI,CAAChB,KAAK,CAACM,WAAP,CAAX;AACA,iCAAWN,KAAX;AAAkBgB,UAAAA,IAAI,EAAJA;AAAlB;;AACJ,WAAK,WAAL;AACI,iCAAWhB,KAAX;AAAkBwB,UAAAA,UAAU,oBAAMxB,KAAK,CAACwB,UAAZ,sBAAyBH,MAAM,CAACvB,KAAhC,EAAwCuB,MAAM,CAACV,KAA/C;AAA5B;;AACJ;AACI,eAAOX,KAAP;AApBR;AAsBH,GAvBmC,EAuBjC;AAACM,IAAAA,WAAW,EAAE,CAAd;AAAiBkB,IAAAA,UAAU,EAAE,EAA7B;AAAiCR,IAAAA,IAAI,EAAE;AAAvC,GAvBiC,CAFiB;AAAA;AAAA,MAE9ChB,KAF8C;AAAA,MAEvCC,QAFuC,oBA2BrD;;;AACA,MAAMwB,YAAY,GAAGzB,KAAK,CAACgB,IAAN,CAAWhB,KAAK,CAACM,WAAjB,CAArB;AACA,MAAMA,WAAW,GAAGc,WAAW,CAACpB,KAAK,CAACM,WAAP,CAA/B,CA7BqD,CA+BrD;;AACA,WAASoB,QAAT,GAAoB;AAChB;AACA,QAAMC,MAAM,GAAG;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAf;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAY9B,KAAK,CAACgB,IAAlB,EAAwBe,OAAxB,CAAgC,UAAAC,GAAG,EAAI;AACnC;AADmC,iBAEd,CAAChC,KAAK,CAACgB,IAAN,CAAWgB,GAAX,CAAD,EAAkBC,GAAlB,CAAsB,UAAAjB,IAAI,EAAI;AAC/C,YAAI,4BAA4BA,IAAhC,EAAsC;AAAA,sCACaA,IAAI,CAACkB,sBADlB;AAAA,cACrBC,SADqB,yBAC1BH,GAD0B;AAAA,cACHI,WADG,yBACVzB,KADU;AAElCK,UAAAA,IAAI,CAACqB,WAAL,CAAiBrB,IAAI,CAACqB,WAAL,CAAiBC,OAAjB,CAAyBH,SAAzB,CAAjB,cAA2DA,SAA3D,gBAA0EC,WAA1E;AACA,iBAAOpB,IAAI,CAACkB,sBAAZ;AACH;;AACD,eAAOlB,IAAP;AACH,OAPoB,CAFc;AAAA;AAAA,UAE5BuB,UAF4B;;AAUnCZ,MAAAA,MAAM,CAACC,SAAP,CAAiBY,IAAjB,CAAsBD,UAAtB;AACH,KAXD;AAYAE,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDf,MAArD;AACH,GAhDoD,CAkDrD;;;AACA,WAASgB,QAAT,CAAkBC,KAAlB,EAAyB;AACrB3C,IAAAA,QAAQ,CAAC;AAACS,MAAAA,IAAI,EAAE,QAAP;AAAiBZ,MAAAA,KAAK,EAAEE,KAAK,CAACM,WAA9B;AAA2CiB,MAAAA,OAAO,oBACpDE,YADoD;AAEvDS,QAAAA,sBAAsB,EAAE;AAACF,UAAAA,GAAG,EAAE1B,WAAW,CAACuC,cAAlB;AAAkClC,UAAAA,KAAK,EAAEiC,KAAK,CAACE,MAAN,CAAanC;AAAtD;AAF+B;AAAlD,KAAD,CAAR;AAIH;;AAED,SACI,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,GAAR;AAAY,IAAA,SAAS,EAAC,cAAtB;AAAqC,IAAA,KAAK,EAAE;AAAEoC,MAAAA,eAAe,gBAASzC,WAAW,CAACyC,eAArB;AAAjB,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,SAAS,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsC/C,KAAK,CAACM,WAAN,GAAoB,CAA1D,OAA8Dc,WAAW,CAACE,MAA1E,CADJ,EAEI;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqChB,WAAW,CAAC0C,YAAjD,CAFJ,EAGI;AAAG,IAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAHJ,CAFJ,EASI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,GAAR;AAAY,IAAA,SAAS,EAAC,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,QAAD;AACI,IAAA,WAAW,EAAEhD,KAAK,CAACM,WADvB;AAEI,IAAA,IAAI,EAAE,gBAAM,CAAE,CAFlB;AAGI,IAAA,QAAQ,EAAE,oBAAM,CAAE,CAHtB;AAII,IAAA,QAAQ,EAAE,KAJd;AAKI,IAAA,KAAK,EAAE,KALX;AAMI,IAAA,QAAQ,EAAE,KANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASKc,WAAW,CAACa,GAAZ,CAAgB,UAAClC,IAAD,EAAOD,KAAP;AAAA,WACb,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAEA,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AACI,MAAA,KAAK,EAAEA,KADX;AAEI,MAAA,IAAI,EAAEC,IAFV;AAGI,MAAA,KAAK,EAAEC,KAHX;AAII,MAAA,QAAQ,EAAEC,QAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADa;AAAA,GAAhB,CATL,CAFJ,EAwBKD,KAAK,CAACwB,UAAN,CAAiBxB,KAAK,CAACM,WAAvB,KACG;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEI,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAzBR,EAgCKA,WAAW,CAAC2C,WAAZ,IAA2B3C,WAAW,CAAC4C,iBAAZ,CAA8BzB,YAA9B,CAA3B,IACG;AAAK,IAAA,KAAK,EAAC,yBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,WAAW,EAAC,iBAFhB;AAGI,IAAA,KAAK,EAAEA,YAAY,IAAIA,YAAY,CAACS,sBAA7B,GAAsDT,YAAY,CAACS,sBAAb,CAAoCvB,KAA1F,GAAkG,EAH7G;AAII,IAAA,QAAQ,EAAEgC,QAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAjCR,EA4CI,oBAAC,aAAD;AACI,IAAA,QAAQ,EAAE1C,QADd;AAEI,IAAA,SAAS,EAAED,KAAK,CAACM,WAAN,GAAoB,CAFnC;AAGI,IAAA,SAAS,EAAEA,WAAW,CAAC6C,OAAZ,CAAoB1B,YAApB,CAHf;AAII,IAAA,QAAQ,EAAEA,YAAY,KAAK2B,SAJ/B;AAKI,IAAA,SAAS,EAAE9C,WAAW,CAAC+C,SAAZ,GAAwB/C,WAAW,CAAC+C,SAApC,GAAgD,iBAL/D;AAMI,IAAA,UAAU,EAAGrD,KAAK,CAACM,WAAN,GAAoB,CAArB,KAA4Bc,WAAW,CAACE,MANxD;AAOI,IAAA,QAAQ,EAAEI,QAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5CJ,CATJ,CADJ;AAkEH,CA5Hc,CAAf;AA8HA,eAAeT,MAAf","sourcesContent":["import React, {useReducer, useRef, useEffect} from 'react'\nimport {Carousel, CarouselItem, Row, Col, Input} from 'reactstrap'\nimport {IoMdArrowDown} from 'react-icons/io'\nimport SurveyActions from './SurveyActions'\n\n// Component for the survey slide\nconst SurveyStep = ({ index, step, state, dispatch }) => {\n    const sentinelRef = useRef(null)\n    const observerRef = useRef(null)\n    const Component = step.component\n\n    // Handles observation of the sentinel so we can know when scrolling is possible\n    useEffect(() => {\n        if (state.currentStep !== index) { return }\n\n        if (observerRef.current === null) {\n            observerRef.current = new IntersectionObserver(([entry]) => {\n                if (entry) {\n                    dispatch({ type: 'SCROLLING', index, value: !entry.isIntersecting })\n                }\n            })\n        }\n        const observer = observerRef.current\n        observer.observe(sentinelRef.current)\n        return () => observer.disconnect()\n    }, [state.currentStep, index, dispatch])\n\n    return (\n        <div className=\"survey__right--content\">\n            {/* Dynamic component for this specific survey step. See `SURVEY_STEPS` */}\n            <Component\n                index={index}\n                step={step}\n                state={state.data[index]}\n                dispatch={dispatch}\n            />\n            {/* We use the sentinel to determine if the content is scrollable\n                and if it has been scrolled to the bottom */}\n            <div ref={sentinelRef} className=\"survey__sentinel\" />\n        </div>\n    )\n}\n\nconst Survey = React.memo(({ surveyId, surveySteps }) => {\n    // Survey state reducer\n    const [state, dispatch] = useReducer((state, action) => {\n        switch (action.type) {\n            case 'NEXT':\n                return {\n                    ...state,\n                    currentStep: (state.currentStep + 1) === surveySteps.length ? state.currentStep : state.currentStep + 1\n                }\n            case 'BACK':\n                return {\n                    ...state,\n                    currentStep: state.currentStep === 0 ? state.currentStep : state.currentStep - 1\n                }\n            case 'UPDATE':\n                return {...state, data: {...state.data, [action.index]: action.payload}}\n            case 'CLEAR':\n                const data = state.data\n                delete data[state.currentStep]\n                return {...state, data}\n            case 'SCROLLING':\n                return {...state, scrollable: {...state.scrollable, [action.index]: action.value}}\n            default:\n                return state\n        }\n    }, {currentStep: 0, scrollable: {}, data: {}})\n\n    // Get the current survey step information\n    const currentState = state.data[state.currentStep]\n    const currentStep = surveySteps[state.currentStep]\n\n    // Handle submission of the survey (the final step)\n    function onSubmit() {\n        // TODO: User registration\n        const params = { responses: [] }\n        Object.keys(state.data).forEach(key => {\n            // Add any `additional_information` added from a survey step\n            const [mappedData] = [state.data[key]].map(data => {\n                if ('additional_information' in data) {\n                    const { key: optionKey, value: optionValue } = data.additional_information\n                    data.step_values[data.step_values.indexOf(optionKey)] = `${optionKey} - ${optionValue}`\n                    delete data.additional_information\n                }\n                return data\n            })\n            params.responses.push(mappedData)\n        })\n        console.log('sending the following data structure:', params)\n    }\n\n    // Handle text input on the textarea\n    function onChange(event) {\n        dispatch({type: 'UPDATE', index: state.currentStep, payload: {\n            ...currentState,\n            additional_information: {key: currentStep.textAreaOption, value: event.target.value}\n        }})\n    }\n\n    return (\n        <Row className=\"survey\">\n            {/* Left side (This is outside the carousel) */}\n            <Col md=\"5\" className=\"survey__left\" style={{ backgroundImage: `url(${currentStep.backgroundImage})` }}>\n                <span className=\"survey__left--step\">{state.currentStep + 1}/{surveySteps.length}</span>\n                <h1 className=\"survey__left--title\">{currentStep.questionText}</h1>\n                <p className=\"survey__left--footer\">Complete the survey and get up to 6 months of free, bespoke skincare</p>\n            </Col>\n\n            {/* Right side */}\n            <Col md=\"7\" className=\"survey__right\">\n                {/* Content */}\n                <Carousel\n                    activeIndex={state.currentStep}\n                    next={() => {}}\n                    previous={() => {}}\n                    keyboard={false}\n                    pause={false}\n                    interval={false}\n                >\n                    {/* Survey slide */}\n                    {surveySteps.map((step, index) => (\n                        <CarouselItem key={index}>\n                            <SurveyStep\n                                index={index}\n                                step={step}\n                                state={state}\n                                dispatch={dispatch}\n                            />\n                        </CarouselItem>\n                    ))}\n                </Carousel>\n\n                {/* Scroll Notifier */}\n                {state.scrollable[state.currentStep] && (\n                    <div className=\"survey__right--scroll\">\n                        Scroll for more\n                        <IoMdArrowDown size=\"16\" />\n                    </div>\n                )}\n\n                {/* Textarea */}\n                {currentStep.hasTextArea && currentStep.isTextAreaVisible(currentState) && (\n                    <div class=\"survey__right--textarea\">\n                        <Input\n                            type=\"textarea\"\n                            placeholder=\"Tell us more...\"\n                            value={currentState && currentState.additional_information ? currentState.additional_information.value : ''}\n                            onChange={onChange}\n                        />\n                    </div>\n                )}\n\n                {/* Actions */}\n                <SurveyActions\n                    dispatch={dispatch}\n                    canGoBack={state.currentStep > 0}\n                    canGoNext={currentStep.isValid(currentState)}\n                    canClear={currentState !== undefined}\n                    clearText={currentStep.clearText ? currentStep.clearText : 'Clear selection'}\n                    isLastPage={(state.currentStep + 1) === surveySteps.length}\n                    onSubmit={onSubmit}\n                />\n            </Col>\n        </Row>\n    )\n})\n\nexport default Survey\n"]},"metadata":{},"sourceType":"module"}