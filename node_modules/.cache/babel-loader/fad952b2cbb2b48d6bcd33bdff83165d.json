{"ast":null,"code":"import _toConsumableArray from \"/Users/josh/Projects/symbiome/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/josh/Projects/symbiome/src/components/Survey/Select.js\";\nimport React, { useCallback } from 'react';\nimport Circle1 from 'assets/img/circle_1.png';\nimport Circle2 from 'assets/img/circle_3.png';\nimport Circle3 from 'assets/img/circle_2.png';\nimport Circle4 from 'assets/img/circle_4.png';\nimport Circle5 from 'assets/img/circle_5.png';\nvar BACKGROUND_IMAGES = [Circle1, Circle2, Circle3, Circle4, Circle5];\n\nvar Select = function Select(_ref) {\n  var index = _ref.index,\n      step = _ref.step,\n      state = _ref.state,\n      dispatch = _ref.dispatch;\n  var isActive = useCallback(function (option) {\n    return state && state.step_values.includes(option);\n  }, [state]);\n  var getSelectImage = useCallback(function (option, index) {\n    if (!isActive(option)) {\n      return {};\n    }\n\n    var idx = index % BACKGROUND_IMAGES.length;\n    return {\n      backgroundImage: \"url(\".concat(BACKGROUND_IMAGES[idx], \")\")\n    };\n  }, [state]);\n\n  function onSelect(option) {\n    var payload = {\n      completed_at: new Date().toJSON(),\n      step_id: index + 1,\n      step_values: []\n    };\n\n    if (step.maxSelect === 1) {\n      payload.step_values = [option];\n    } else {\n      // Handle the removal of an item already selected\n      if (state && state.step_values.includes(option)) {\n        var data = state.step_values;\n        data.splice(data.indexOf(option), 1); // Reset the data if the user has manually removed all items\n\n        if (data.length === 0) {\n          return dispatch({\n            type: 'CLEAR'\n          });\n        }\n\n        payload.step_values = data;\n      } else {\n        // Limit selections to `maxSelect`\n        if (!state || state && state.step_values.length !== step.maxSelect) {\n          payload.step_values = [].concat(_toConsumableArray(state && state.step_values || []), [option]);\n        } else {\n          return;\n        }\n      }\n    }\n\n    dispatch({\n      type: 'UPDATE',\n      payload: payload\n    });\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, step.helperText), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, step.options.map(function (option, index) {\n    return React.createElement(\"li\", {\n      key: index,\n      className: isActive(option) ? 'active' : undefined,\n      style: getSelectImage(option, index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      onClick: function onClick() {\n        return onSelect(option);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, option));\n  })));\n};\n\nexport default Select;","map":{"version":3,"sources":["/Users/josh/Projects/symbiome/src/components/Survey/Select.js"],"names":["React","useCallback","Circle1","Circle2","Circle3","Circle4","Circle5","BACKGROUND_IMAGES","Select","index","step","state","dispatch","isActive","option","step_values","includes","getSelectImage","idx","length","backgroundImage","onSelect","payload","completed_at","Date","toJSON","step_id","maxSelect","data","splice","indexOf","type","helperText","options","map","undefined"],"mappings":"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","sourcesContent":["import React, {useCallback} from 'react';\n\nimport Circle1 from 'assets/img/circle_1.png'\nimport Circle2 from 'assets/img/circle_3.png'\nimport Circle3 from 'assets/img/circle_2.png'\nimport Circle4 from 'assets/img/circle_4.png'\nimport Circle5 from 'assets/img/circle_5.png'\nconst BACKGROUND_IMAGES = [Circle1, Circle2, Circle3, Circle4, Circle5]\n\nconst Select = ({ index, step, state, dispatch }) => {\n    const isActive = useCallback((option) => {\n        return state && state.step_values.includes(option)\n    }, [state])\n\n    const getSelectImage = useCallback((option, index) => {\n        if (!isActive(option)) { return {} }\n        const idx = index % BACKGROUND_IMAGES.length\n        return { backgroundImage: `url(${BACKGROUND_IMAGES[idx]})` }\n    }, [state])\n\n    function onSelect(option) {\n        const payload = { completed_at: new Date().toJSON(), step_id: (index + 1), step_values: [] }\n\n        if (step.maxSelect === 1) {\n            payload.step_values = [option]\n        } else {\n            // Handle the removal of an item already selected\n            if (state && state.step_values.includes(option)) {\n                const data = state.step_values\n                data.splice(data.indexOf(option), 1)\n                // Reset the data if the user has manually removed all items\n                if (data.length === 0) {\n                    return dispatch({ type: 'CLEAR' })\n                }\n                payload.step_values = data\n            } else {\n                // Limit selections to `maxSelect`\n                if (!state || (state && state.step_values.length !== step.maxSelect)) {\n                    payload.step_values = [...((state && state.step_values) || []), option]\n                } else {\n                    return\n                }\n            }\n        }\n\n        dispatch({ type: 'UPDATE', payload })\n    }\n\n    return (\n        <React.Fragment>\n            <span>{step.helperText}</span>\n            <ul>\n                {step.options.map((option, index) => (\n                    <li key={index} className={isActive(option) ? 'active' : undefined} style={getSelectImage(option, index)}>\n                        <button type=\"button\" onClick={() => onSelect(option)}>\n                            {option}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </React.Fragment>\n    )\n}\n\nexport default Select\n"]},"metadata":{},"sourceType":"module"}