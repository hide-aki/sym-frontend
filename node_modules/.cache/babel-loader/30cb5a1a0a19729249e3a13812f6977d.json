{"ast":null,"code":"import _regeneratorRuntime from \"/Users/josh/Projects/symbiome/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/josh/Projects/symbiome/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/josh/Projects/symbiome/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/josh/Projects/symbiome/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/josh/Projects/symbiome/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/josh/Projects/symbiome/src/components/Survey/Survey.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer, useRef, useEffect, useMemo } from 'react';\nimport { Carousel, CarouselItem, Row, Col, Input } from 'reactstrap';\nimport { IoMdArrowDown } from 'react-icons/io';\nimport { uuidv4 } from 'utils/uuid';\nimport SurveyActions from './SurveyActions';\nimport Select from './Select';\nimport UserForm from './UserForm'; // Component for the survey slide\n\nvar SurveyStep = function SurveyStep(_ref) {\n  var index = _ref.index,\n      step = _ref.step,\n      state = _ref.state,\n      dispatch = _ref.dispatch;\n  var sentinelRef = useRef(null);\n  var observerRef = useRef(null);\n  var Component = step.isUserForm ? UserForm : Select; // Handles observation of the sentinel so we can know when scrolling is possible\n\n  useEffect(function () {\n    if (state.currentStep !== index) {\n      return;\n    }\n\n    if (observerRef.current === null) {\n      observerRef.current = new IntersectionObserver(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 1),\n            entry = _ref3[0];\n\n        if (entry) {\n          dispatch({\n            type: 'SCROLLING',\n            index: index,\n            value: !entry.isIntersecting\n          });\n        }\n      });\n    }\n\n    var observer = observerRef.current;\n    observer.observe(sentinelRef.current);\n    return function () {\n      return observer.disconnect();\n    };\n  }, [state.currentStep, index, dispatch]);\n  return React.createElement(\"div\", {\n    className: \"survey__right--content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Component, {\n    index: index,\n    step: step,\n    state: state.data[index],\n    dispatch: dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    ref: sentinelRef,\n    className: \"survey__sentinel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n};\n\nvar Survey = React.memo(function (_ref4) {\n  var surveyId = _ref4.surveyId,\n      questions = _ref4.questions;\n\n  // Survey state reducer\n  var _useReducer = useReducer(function (state, action) {\n    switch (action.type) {\n      case 'NEXT':\n        return _objectSpread({}, state, {\n          currentStep: state.currentStep + 1 === questions.length ? state.currentStep : state.currentStep + 1\n        });\n\n      case 'BACK':\n        return _objectSpread({}, state, {\n          currentStep: state.currentStep === 0 ? state.currentStep : state.currentStep - 1\n        });\n\n      case 'UPDATE':\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, action.index, action.payload))\n        });\n\n      case 'CLEAR':\n        var data = state.data;\n        delete data[state.currentStep];\n        return _objectSpread({}, state, {\n          data: data\n        });\n\n      case 'SCROLLING':\n        return _objectSpread({}, state, {\n          scrollable: _objectSpread({}, state.scrollable, _defineProperty({}, action.index, action.value))\n        });\n\n      case 'SHOW_TEXT':\n        return _objectSpread({}, state, {\n          showTextArea: _objectSpread({}, state.showTextArea, _defineProperty({}, action.index, action.value))\n        });\n\n      case 'SUBMITTING':\n        return _objectSpread({}, state, {\n          isSubmitting: action.value\n        });\n\n      case 'CONFIRMED':\n        return _objectSpread({}, state, {\n          isSubmitting: false,\n          isConfirmed: true,\n          confirmationCode: action.uuid,\n          firstName: action.name,\n          email: action.email\n        });\n\n      default:\n        return state;\n    }\n  }, {\n    currentStep: 0,\n    // Current slide\n    scrollable: {},\n    // Whether the slide is scrollable or not\n    data: {},\n    // The state for each slide\n    showTextArea: {},\n    // Whether a slide has a textarea visible or not\n    isSubmitting: false,\n    // Whether we are submitting to the API\n    isConfirmed: false,\n    // If the API request was accepted\n    confirmationCode: null,\n    firstName: null,\n    email: null\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1]; // Get the current survey step information\n\n\n  var currentState = state.data[state.currentStep];\n  var currentStep = questions[state.currentStep];\n  var textAreaOptionValue = useMemo(function () {\n    return (currentStep.options || []).filter(function (x) {\n      return typeof x === 'object' && x.hasTextArea;\n    });\n  }, [currentStep]); // Handle submission of the survey (the final step)\n\n  function onSubmit() {\n    return _onSubmit.apply(this, arguments);\n  } // Handle text input on the textarea\n\n\n  function _onSubmit() {\n    _onSubmit = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var data, user, response, params, surveyUuid;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!state.isSubmitting) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              dispatch({\n                type: 'SUBMITTING',\n                value: true\n              }); // Extract user data (final step in the list)\n\n              data = Object.assign({}, state.data);\n              user = data[questions.length - 1];\n              delete data[questions.length - 1]; // Create user\n\n              _context.next = 8;\n              return fetch('https://api.symbiome.co/api/v1/users', {\n                method: 'POST',\n                body: JSON.stringify({\n                  email: user.email,\n                  uuid: uuidv4(),\n                  data: {\n                    birthdate: user.birthday.toJSON().split('T')[0],\n                    first_name: user.first_name,\n                    last_name: user.last_name,\n                    instagram_id: user.instagram,\n                    mobile_phone: user.phone,\n                    signup_referer: user.signup_referer\n                  }\n                })\n              });\n\n            case 8:\n              response = _context.sent;\n\n              if (!(response.status >= 400)) {\n                _context.next = 18;\n                break;\n              }\n\n              console.debug('Response Status:', response.status);\n              _context.t0 = console;\n              _context.next = 14;\n              return response.text();\n\n            case 14:\n              _context.t1 = _context.sent;\n\n              _context.t0.debug.call(_context.t0, 'Response Text:', _context.t1);\n\n              dispatch({\n                type: 'SUBMITTING',\n                value: false\n              });\n              return _context.abrupt(\"return\", window.alert('There was an issue submitting the survey.'));\n\n            case 18:\n              // Create survey responses\n              params = {\n                responses: []\n              };\n              Object.keys(data).forEach(function (key) {\n                // Merge in any `additional_information` added from a survey step\n                var current = Object.assign({}, data[key]);\n\n                if (current.additional_information) {\n                  var _current$additional_i = current.additional_information,\n                      optionKey = _current$additional_i.key,\n                      optionValue = _current$additional_i.value;\n                  current.step_values = _toConsumableArray(current.step_values);\n                  current.step_values[current.step_values.indexOf(optionKey)] = \"\".concat(optionKey, \" - \").concat(optionValue);\n                }\n\n                params.responses.push({\n                  step_id: current.step_id,\n                  step_values: current.step_values\n                });\n              });\n              surveyUuid = uuidv4();\n              _context.next = 23;\n              return fetch(\"https://api.symbiome.co/api/v1/surveys/\".concat(surveyId, \"/responses\"), {\n                method: 'POST',\n                body: JSON.stringify(_objectSpread({\n                  user_email: user.email,\n                  response_at: new Date().toJSON(),\n                  response_id: surveyUuid\n                }, params))\n              });\n\n            case 23:\n              response = _context.sent;\n\n              if (!(response.status >= 400)) {\n                _context.next = 33;\n                break;\n              }\n\n              console.debug('Response Status:', response.status);\n              _context.t2 = console;\n              _context.next = 29;\n              return response.text();\n\n            case 29:\n              _context.t3 = _context.sent;\n\n              _context.t2.debug.call(_context.t2, 'Response Text:', _context.t3);\n\n              dispatch({\n                type: 'SUBMITTING',\n                value: false\n              });\n              return _context.abrupt(\"return\", window.alert('There was an issue submitting the survey.'));\n\n            case 33:\n              // Navigate to the confirmation page.\n              dispatch({\n                type: 'CONFIRMED',\n                uuid: surveyUuid,\n                name: user.first_name,\n                email: user.email\n              });\n\n            case 34:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _onSubmit.apply(this, arguments);\n  }\n\n  function _onChange(key, event) {\n    dispatch({\n      type: 'UPDATE',\n      index: state.currentStep,\n      payload: _objectSpread({}, currentState, {\n        additional_information: {\n          key: key,\n          value: event.target.value\n        }\n      })\n    });\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, state.isConfirmed ? React.createElement(Row, {\n    className: \"survey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(Col, {\n    md: \"5\",\n    className: \"survey__left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"survey__left--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"Welcome to the Symbiome community, \", state.firstName, \"!\"), React.createElement(\"div\", {\n    className: \"survey__left--meta\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, state.email), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"Confirmation number #\", state.confirmationCode))), React.createElement(Col, {\n    md: \"7\",\n    className: \"survey__right survey__right--confirm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    class: \"survey__right--confirm--header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, \"Thank you for entrusting us with this information. An email was sent to the address your provided confirming the information you gave us, your account details, our privacy policy, and next steps.\"), React.createElement(\"p\", {\n    class: \"survey__right--confirm--footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \"In the meantime please visit our \", React.createElement(\"a\", {\n    href: \"#\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Instagram\"), \" or \", React.createElement(\"a\", {\n    href: \"#\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"subscribe to our newsletter\"), \" to stay up to date with secret DM groups, exclusive events, and more.\"))) : React.createElement(Row, {\n    className: \"survey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(Col, {\n    md: \"5\",\n    className: \"survey__left\",\n    style: {\n      backgroundImage: \"url(\".concat(currentStep.backgroundImage, \")\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"survey__left--step\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, state.currentStep + 1, \"/\", questions.length), React.createElement(\"h1\", {\n    className: \"survey__left--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, currentStep.questionText), React.createElement(\"p\", {\n    className: \"survey__left--footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, \"Complete the survey and get up to 6 months of free, bespoke skincare\")), React.createElement(Col, {\n    md: \"7\",\n    className: \"survey__right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(Carousel, {\n    activeIndex: state.currentStep,\n    next: function next() {},\n    previous: function previous() {},\n    keyboard: false,\n    pause: false,\n    interval: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, questions.map(function (step, index) {\n    return React.createElement(CarouselItem, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(SurveyStep, {\n      index: index,\n      step: step,\n      state: state,\n      dispatch: dispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }));\n  })), state.scrollable[state.currentStep] && React.createElement(\"div\", {\n    className: \"survey__right--scroll\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, \"Scroll for more\", React.createElement(IoMdArrowDown, {\n    size: \"16\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  })), state.showTextArea[state.currentStep] && React.createElement(\"div\", {\n    class: \"survey__right--textarea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"textarea\",\n    placeholder: \"Tell us more...\",\n    value: currentState && currentState.additional_information ? currentState.additional_information.value : '',\n    onChange: function onChange(event) {\n      return _onChange(textAreaOptionValue[0].text, event);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  })), React.createElement(SurveyActions, {\n    dispatch: dispatch,\n    canGoBack: state.currentStep > 0,\n    canGoNext: currentStep.isValid ? currentStep.isValid(currentState) : currentState && currentState.step_values.length > 0,\n    canClear: currentState !== undefined,\n    clearText: currentStep.clearText || 'Clear selection',\n    isLastPage: state.currentStep + 1 === questions.length,\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }))));\n});\nexport default Survey;","map":{"version":3,"sources":["/Users/josh/Projects/symbiome/src/components/Survey/Survey.js"],"names":["React","useReducer","useRef","useEffect","useMemo","Carousel","CarouselItem","Row","Col","Input","IoMdArrowDown","uuidv4","SurveyActions","Select","UserForm","SurveyStep","index","step","state","dispatch","sentinelRef","observerRef","Component","isUserForm","currentStep","current","IntersectionObserver","entry","type","value","isIntersecting","observer","observe","disconnect","data","Survey","memo","surveyId","questions","action","length","payload","scrollable","showTextArea","isSubmitting","isConfirmed","confirmationCode","uuid","firstName","name","email","currentState","textAreaOptionValue","options","filter","x","hasTextArea","onSubmit","Object","assign","user","fetch","method","body","JSON","stringify","birthdate","birthday","toJSON","split","first_name","last_name","instagram_id","instagram","mobile_phone","phone","signup_referer","response","status","console","debug","text","window","alert","params","responses","keys","forEach","key","additional_information","optionKey","optionValue","step_values","indexOf","push","step_id","surveyUuid","user_email","response_at","Date","response_id","onChange","event","target","backgroundImage","questionText","map","isValid","undefined","clearText"],"mappings":"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","sourcesContent":["import React, {useReducer, useRef, useEffect, useMemo} from 'react'\nimport {Carousel, CarouselItem, Row, Col, Input} from 'reactstrap'\nimport {IoMdArrowDown} from 'react-icons/io'\nimport {uuidv4} from 'utils/uuid'\nimport SurveyActions from './SurveyActions'\nimport Select from './Select'\nimport UserForm from './UserForm'\n\n// Component for the survey slide\nconst SurveyStep = ({ index, step, state, dispatch }) => {\n    const sentinelRef = useRef(null)\n    const observerRef = useRef(null)\n    const Component = step.isUserForm ? UserForm : Select\n\n    // Handles observation of the sentinel so we can know when scrolling is possible\n    useEffect(() => {\n        if (state.currentStep !== index) { return }\n\n        if (observerRef.current === null) {\n            observerRef.current = new IntersectionObserver(([entry]) => {\n                if (entry) {\n                    dispatch({ type: 'SCROLLING', index, value: !entry.isIntersecting })\n                }\n            })\n        }\n        const observer = observerRef.current\n        observer.observe(sentinelRef.current)\n        return () => observer.disconnect()\n    }, [state.currentStep, index, dispatch])\n\n    return (\n        <div className=\"survey__right--content\">\n            {/* Dynamic component for this specific survey step. See `SURVEY_STEPS` */}\n            <Component\n                index={index}\n                step={step}\n                state={state.data[index]}\n                dispatch={dispatch}\n            />\n            {/* We use the sentinel to determine if the content is scrollable\n                and if it has been scrolled to the bottom */}\n            <div ref={sentinelRef} className=\"survey__sentinel\" />\n        </div>\n    )\n}\n\nconst Survey = React.memo(({ surveyId, questions }) => {\n    // Survey state reducer\n    const [state, dispatch] = useReducer((state, action) => {\n        switch (action.type) {\n            case 'NEXT':\n                return {...state, currentStep: (state.currentStep + 1) === questions.length ? state.currentStep : state.currentStep + 1}\n            case 'BACK':\n                return {...state, currentStep: state.currentStep === 0 ? state.currentStep : state.currentStep - 1}\n            case 'UPDATE':\n                return {...state, data: {...state.data, [action.index]: action.payload}}\n            case 'CLEAR':\n                const data = state.data\n                delete data[state.currentStep]\n                return {...state, data}\n            case 'SCROLLING':\n                return {...state, scrollable: {...state.scrollable, [action.index]: action.value}}\n            case 'SHOW_TEXT':\n                return {...state, showTextArea: { ...state.showTextArea, [action.index]: action.value}}\n            case 'SUBMITTING':\n                return {...state, isSubmitting: action.value}\n            case 'CONFIRMED':\n                return {\n                    ...state,\n                    isSubmitting: false,\n                    isConfirmed: true,\n                    confirmationCode: action.uuid,\n                    firstName: action.name,\n                    email: action.email\n                }\n            default:\n                return state\n        }\n    }, {\n        currentStep: 0, // Current slide\n        scrollable: {}, // Whether the slide is scrollable or not\n        data: {}, // The state for each slide\n        showTextArea: {}, // Whether a slide has a textarea visible or not\n        isSubmitting: false, // Whether we are submitting to the API\n        isConfirmed: false, // If the API request was accepted\n        confirmationCode: null,\n        firstName: null,\n        email: null\n    })\n\n    // Get the current survey step information\n    const currentState = state.data[state.currentStep]\n    const currentStep = questions[state.currentStep]\n    const textAreaOptionValue = useMemo(() => (currentStep.options || []).filter(x => typeof x === 'object' && x.hasTextArea), [currentStep])\n\n    // Handle submission of the survey (the final step)\n    async function onSubmit() {\n        // Don't allow multiple requests\n        if (state.isSubmitting) { return }\n        dispatch({ type: 'SUBMITTING', value: true })\n\n        // Extract user data (final step in the list)\n        const data = Object.assign({}, state.data)\n        const user = data[questions.length - 1]\n        delete data[questions.length - 1]\n\n        // Create user\n        let response = await fetch('https://api.symbiome.co/api/v1/users', {\n            method: 'POST',\n            body: JSON.stringify({\n                email: user.email,\n                uuid: uuidv4(),\n                data: {\n                    birthdate: user.birthday.toJSON().split('T')[0],\n                    first_name: user.first_name,\n                    last_name: user.last_name,\n                    instagram_id: user.instagram,\n                    mobile_phone: user.phone,\n                    signup_referer: user.signup_referer\n                }\n            })\n        })\n        if (response.status >= 400) {\n            console.debug('Response Status:', response.status)\n            console.debug('Response Text:', await response.text())\n            dispatch({ type: 'SUBMITTING', value: false })\n            return window.alert('There was an issue submitting the survey.')\n        }\n\n        // Create survey responses\n        const params = { responses: [] }\n        Object.keys(data).forEach(key => {\n            // Merge in any `additional_information` added from a survey step\n            const current = Object.assign({}, data[key])\n            if (current.additional_information) {\n                const { key: optionKey, value: optionValue } = current.additional_information\n                current.step_values = [...current.step_values]\n                current.step_values[current.step_values.indexOf(optionKey)] = `${optionKey} - ${optionValue}`\n            }\n            params.responses.push({\n                step_id: current.step_id,\n                step_values: current.step_values\n            })\n        })\n\n        const surveyUuid = uuidv4()\n        response = await fetch(`https://api.symbiome.co/api/v1/surveys/${surveyId}/responses`, {\n            method: 'POST',\n            body: JSON.stringify({\n                user_email: user.email,\n                response_at: new Date().toJSON(),\n                response_id: surveyUuid,\n                ...params\n            })\n        })\n        if (response.status >= 400) {\n            console.debug('Response Status:', response.status)\n            console.debug('Response Text:', await response.text())\n            dispatch({ type: 'SUBMITTING', value: false })\n            return window.alert('There was an issue submitting the survey.')\n        }\n\n        // Navigate to the confirmation page.\n        dispatch({ type: 'CONFIRMED', uuid: surveyUuid, name: user.first_name, email: user.email })\n    }\n\n    // Handle text input on the textarea\n    function onChange(key, event) {\n        dispatch({type: 'UPDATE', index: state.currentStep, payload: {\n            ...currentState,\n            additional_information: {key, value: event.target.value}\n        }})\n    }\n\n    return (\n        <React.Fragment>\n            {state.isConfirmed ?\n                (\n                    <Row className=\"survey\">\n                        <Col md=\"5\" className=\"survey__left\">\n                            <h1 className=\"survey__left--title\">Welcome to the Symbiome community, {state.firstName}!</h1>\n                            <div className=\"survey__left--meta\">\n                                <p>{state.email}</p>\n                                <p>Confirmation number #{state.confirmationCode}</p>\n                            </div>\n                        </Col>\n                        <Col md=\"7\" className=\"survey__right survey__right--confirm\">\n                            <p class=\"survey__right--confirm--header\">\n                                Thank you for entrusting us with this information. An email was sent to the address your provided confirming the information you gave us, your account details, our privacy policy, and next steps.\n                            </p>\n                            <p class=\"survey__right--confirm--footer\">\n                                In the meantime please visit our <a href=\"#\">Instagram</a> or <a href=\"#\">subscribe to our newsletter</a> to stay up to date with secret DM groups, exclusive events, and more.\n                            </p>\n                        </Col>\n                    </Row>\n                ) :\n                (\n                    <Row className=\"survey\">\n                        {/* Left side (This is outside the carousel) */}\n                        <Col md=\"5\" className=\"survey__left\" style={{ backgroundImage: `url(${currentStep.backgroundImage})` }}>\n                            <span className=\"survey__left--step\">{state.currentStep + 1}/{questions.length}</span>\n                            <h1 className=\"survey__left--title\">{currentStep.questionText}</h1>\n                            <p className=\"survey__left--footer\">Complete the survey and get up to 6 months of free, bespoke skincare</p>\n                        </Col>\n\n                        {/* Right side */}\n                        <Col md=\"7\" className=\"survey__right\">\n                            {/* Content */}\n                            <Carousel\n                                activeIndex={state.currentStep}\n                                next={() => {}}\n                                previous={() => {}}\n                                keyboard={false}\n                                pause={false}\n                                interval={false}\n                            >\n                                {/* Survey slide */}\n                                {questions.map((step, index) => (\n                                    <CarouselItem key={index}>\n                                        <SurveyStep\n                                            index={index}\n                                            step={step}\n                                            state={state}\n                                            dispatch={dispatch}\n                                        />\n                                    </CarouselItem>\n                                ))}\n                            </Carousel>\n\n                            {/* Scroll Notifier */}\n                            {state.scrollable[state.currentStep] && (\n                                <div className=\"survey__right--scroll\">\n                                    Scroll for more\n                                    <IoMdArrowDown size=\"16\" />\n                                </div>\n                            )}\n\n                            {/* Textarea */}\n                            {state.showTextArea[state.currentStep] && (\n                                <div class=\"survey__right--textarea\">\n                                    <Input\n                                        type=\"textarea\"\n                                        placeholder=\"Tell us more...\"\n                                        value={currentState && currentState.additional_information ? currentState.additional_information.value : ''}\n                                        onChange={event => onChange(textAreaOptionValue[0].text, event)}\n                                    />\n                                </div>\n                            )}\n\n                            {/* Actions */}\n                            <SurveyActions\n                                dispatch={dispatch}\n                                canGoBack={state.currentStep > 0}\n                                canGoNext={currentStep.isValid ? currentStep.isValid(currentState) : currentState && currentState.step_values.length > 0}\n                                canClear={currentState !== undefined}\n                                clearText={currentStep.clearText || 'Clear selection'}\n                                isLastPage={(state.currentStep + 1) === questions.length}\n                                onSubmit={onSubmit}\n                            />\n                        </Col>\n                    </Row>\n                )\n            }\n        </React.Fragment>\n    )\n})\n\nexport default Survey\n"]},"metadata":{},"sourceType":"module"}