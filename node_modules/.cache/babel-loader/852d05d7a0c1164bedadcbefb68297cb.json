{"ast":null,"code":"import _toConsumableArray from \"/Users/josh/Projects/symbiome/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/josh/Projects/symbiome/src/components/Survey/Select.js\";\nimport React, { useCallback } from 'react';\nimport Circle1 from 'assets/img/circle_1.png';\nimport Circle2 from 'assets/img/circle_3.png';\nimport Circle3 from 'assets/img/circle_2.png';\nimport Circle4 from 'assets/img/circle_4.png';\nimport Circle5 from 'assets/img/circle_5.png';\nvar BACKGROUND_IMAGES = [Circle1, Circle2, Circle3, Circle4, Circle5]; // Multiple select component for the parent Survey component\n\nvar Select = function Select(_ref) {\n  var index = _ref.index,\n      step = _ref.step,\n      state = _ref.state,\n      dispatch = _ref.dispatch;\n  // Determine if the option is selected\n  var isActive = useCallback(function (option) {\n    var text = typeof option === 'object' ? option.text : option;\n    return state && state.step_values.includes(text);\n  }, [state]); // Determine which hand-drawn circle image to use for the selection\n\n  var getSelectImage = useCallback(function (option, index) {\n    if (!isActive(option)) {\n      return {};\n    }\n\n    var idx = index % BACKGROUND_IMAGES.length;\n    return {\n      backgroundImage: \"url(\".concat(BACKGROUND_IMAGES[idx], \")\")\n    };\n  }, [isActive]);\n\n  function onSelect(option) {\n    var payload = {\n      step_id: index + 1,\n      step_values: [],\n      additional_information: state && state.additional_information || undefined\n    };\n    var text = typeof option === 'object' ? option.text : option;\n\n    if (step.maxSelect === 1) {\n      payload.step_values = [text];\n    } else {\n      // Handle the removal of an item already selected\n      if (isActive(option)) {\n        var data = state.step_values;\n        data.splice(data.indexOf(text), 1); // Reset the data if the user has manually removed all items\n\n        if (data.length === 0) {\n          return dispatch({\n            type: 'CLEAR'\n          });\n        }\n\n        payload.step_values = data;\n      } else {\n        // Limit selections to `maxSelect`\n        if (!state || state && state.step_values.length !== step.maxSelect) {\n          payload.step_values = [].concat(_toConsumableArray(state && state.step_values || []), [text]);\n        } else {\n          return;\n        }\n      }\n    }\n\n    dispatch({\n      type: 'UPDATE',\n      index: index,\n      payload: payload\n    });\n\n    if (typeof option === 'object' && option.hasTextArea) {\n      dispatch({\n        type: 'SHOW_TEXT',\n        index: index,\n        value: payload.step_values.includes(option.text)\n      });\n    }\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, step.helperText), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, step.options.map(function (option, index) {\n    return React.createElement(\"li\", {\n      key: index,\n      className: isActive(option) ? 'active' : undefined,\n      style: getSelectImage(option, index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      onClick: function onClick() {\n        return onSelect(option);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, typeof option === 'object' ? option.text : option));\n  })));\n};\n\nexport default Select;","map":{"version":3,"sources":["/Users/josh/Projects/symbiome/src/components/Survey/Select.js"],"names":["React","useCallback","Circle1","Circle2","Circle3","Circle4","Circle5","BACKGROUND_IMAGES","Select","index","step","state","dispatch","isActive","option","text","step_values","includes","getSelectImage","idx","length","backgroundImage","onSelect","payload","step_id","additional_information","undefined","maxSelect","data","splice","indexOf","type","hasTextArea","value","helperText","options","map"],"mappings":"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","sourcesContent":["import React, {useCallback} from 'react';\n\nimport Circle1 from 'assets/img/circle_1.png'\nimport Circle2 from 'assets/img/circle_3.png'\nimport Circle3 from 'assets/img/circle_2.png'\nimport Circle4 from 'assets/img/circle_4.png'\nimport Circle5 from 'assets/img/circle_5.png'\nconst BACKGROUND_IMAGES = [Circle1, Circle2, Circle3, Circle4, Circle5]\n\n// Multiple select component for the parent Survey component\nconst Select = ({ index, step, state, dispatch }) => {\n    // Determine if the option is selected\n    const isActive = useCallback((option) => {\n        const text = typeof option === 'object' ? option.text : option\n        return state && state.step_values.includes(text)\n    }, [state])\n\n    // Determine which hand-drawn circle image to use for the selection\n    const getSelectImage = useCallback((option, index) => {\n        if (!isActive(option)) { return {} }\n        const idx = index % BACKGROUND_IMAGES.length\n        return { backgroundImage: `url(${BACKGROUND_IMAGES[idx]})` }\n    }, [isActive])\n\n    function onSelect(option) {\n        const payload = { step_id: (index + 1), step_values: [], additional_information: (state && state.additional_information) || undefined }\n        const text = typeof option === 'object' ? option.text : option\n        if (step.maxSelect === 1) {\n            payload.step_values = [text]\n        } else {\n            // Handle the removal of an item already selected\n            if (isActive(option)) {\n                const data = state.step_values\n                data.splice(data.indexOf(text), 1)\n                // Reset the data if the user has manually removed all items\n                if (data.length === 0) {\n                    return dispatch({ type: 'CLEAR' })\n                }\n                payload.step_values = data\n            } else {\n                // Limit selections to `maxSelect`\n                if (!state || (state && state.step_values.length !== step.maxSelect)) {\n                    payload.step_values = [...((state && state.step_values) || []), text]\n                } else {\n                    return\n                }\n            }\n        }\n        dispatch({ type: 'UPDATE', index, payload })\n        if (typeof option === 'object' && option.hasTextArea) {\n            dispatch({ type: 'SHOW_TEXT', index, value: payload.step_values.includes(option.text) })\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <span>{step.helperText}</span>\n            <ul>\n                {step.options.map((option, index) => (\n                    <li key={index} className={isActive(option) ? 'active' : undefined} style={getSelectImage(option, index)}>\n                        <button type=\"button\" onClick={() => onSelect(option)}>\n                            {typeof option === 'object' ? option.text : option}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </React.Fragment>\n    )\n}\n\nexport default Select\n"]},"metadata":{},"sourceType":"module"}