{"ast":null,"code":"import _defineProperty from \"/Users/josh/Projects/symbiome/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/josh/Projects/symbiome/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/josh/Projects/symbiome/src/components/Survey/Survey.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer, useState, useRef, useEffect } from 'react';\nimport { Carousel, CarouselItem, Row, Col } from 'reactstrap';\nimport { IoMdArrowDown } from 'react-icons/io';\nimport SurveyActions from './SurveyActions';\n\nvar SurveyStep = function SurveyStep(_ref) {\n  var index = _ref.index,\n      step = _ref.step,\n      state = _ref.state,\n      dispatch = _ref.dispatch;\n  var rootRef = useRef(null);\n  var sentinelRef = useRef(null);\n  var observerRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSentinelVisible = _useState2[0],\n      setSentinelVisibility = _useState2[1];\n\n  var Component = step.component;\n  useEffect(function () {\n    if (observerRef.current === null) {\n      observerRef.current = new IntersectionObserver(intersectionCallback, {\n        root: rootRef.current\n      });\n    }\n\n    var observer = observerRef.current;\n    observer.observe(sentinelRef.current);\n    return function () {\n      return observer.disconnect();\n    };\n  }, []);\n\n  function intersectionCallback(_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 1),\n        entry = _ref3[0];\n\n    if (entry) {\n      setSentinelVisibility(entry.isIntersecting);\n    }\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    ref: rootRef,\n    className: \"survey__right--content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(Component, {\n    index: index,\n    step: step,\n    state: state.data[index],\n    dispatch: dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    ref: sentinelRef,\n    className: \"survey__sentinel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), !isSentinelVisible && React.createElement(\"div\", {\n    className: \"survey__right--scroll\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Scroll for more\", React.createElement(IoMdArrowDown, {\n    size: \"16\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })));\n};\n\nvar Survey = React.memo(function (_ref4) {\n  var surveyId = _ref4.surveyId,\n      surveySteps = _ref4.surveySteps;\n\n  // Survey state\n  var _useReducer = useReducer(function (state, action) {\n    switch (action.type) {\n      case 'NEXT':\n        return _objectSpread({}, state, {\n          currentStep: state.currentStep + 1 === surveySteps.length ? state.currentStep : state.currentStep + 1\n        });\n\n      case 'BACK':\n        return _objectSpread({}, state, {\n          currentStep: state.currentStep === 0 ? state.currentStep : state.currentStep - 1\n        });\n\n      case 'UPDATE':\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, state.currentStep, action.payload))\n        });\n\n      case 'CLEAR':\n        var data = state.data;\n        delete data[state.currentStep];\n        return _objectSpread({}, state, {\n          data: data\n        });\n\n      default:\n        return state;\n    }\n  }, {\n    currentStep: 0,\n    data: {}\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1]; // Get the current survey step information\n\n\n  var currentState = state.data[state.currentStep];\n  var currentStep = surveySteps[state.currentStep]; // Handle submission of the survey (the final step)\n\n  function onSubmit() {\n    console.log('survey is going to be submitted');\n    var params = {\n      responses: []\n    };\n    Object.keys(state.data).forEach(function (key) {\n      params.responses.push(state.data[key]);\n    });\n    console.log('sending the following data structure:', params);\n  }\n\n  return React.createElement(Row, {\n    className: \"survey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Col, {\n    md: \"6\",\n    className: \"survey__left\",\n    style: {\n      backgroundImage: \"url(\".concat(currentStep.backgroundImage, \")\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"survey__left--step\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, state.currentStep + 1, \"/\", surveySteps.length), React.createElement(\"h1\", {\n    className: \"survey__left--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, currentStep.questionText), React.createElement(\"p\", {\n    className: \"survey__left--footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Complete the survey and get up to 6 months of free, bespoke skincare\")), React.createElement(Col, {\n    md: \"6\",\n    className: \"survey__right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Carousel, {\n    activeIndex: state.currentStep,\n    next: function next() {},\n    previous: function previous() {},\n    keyboard: false,\n    pause: false,\n    interval: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, surveySteps.map(function (step, index) {\n    return React.createElement(CarouselItem, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(SurveyStep, {\n      index: index,\n      step: step,\n      state: state,\n      dispatch: dispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }));\n  })), React.createElement(SurveyActions, {\n    dispatch: dispatch,\n    canGoBack: state.currentStep > 0,\n    canGoNext: currentStep.isValid(currentState),\n    canClear: currentState !== undefined,\n    clearText: currentStep.clearText ? currentStep.clearText : 'Clear selection',\n    isLastPage: state.currentStep + 1 === surveySteps.length,\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })));\n});\nexport default Survey;","map":{"version":3,"sources":["/Users/josh/Projects/symbiome/src/components/Survey/Survey.js"],"names":["React","useReducer","useState","useRef","useEffect","Carousel","CarouselItem","Row","Col","IoMdArrowDown","SurveyActions","SurveyStep","index","step","state","dispatch","rootRef","sentinelRef","observerRef","isSentinelVisible","setSentinelVisibility","Component","component","current","IntersectionObserver","intersectionCallback","root","observer","observe","disconnect","entry","isIntersecting","data","Survey","memo","surveyId","surveySteps","action","type","currentStep","length","payload","currentState","onSubmit","console","log","params","responses","Object","keys","forEach","key","push","backgroundImage","questionText","map","isValid","undefined","clearText"],"mappings":"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","sourcesContent":["import React, {useReducer, useState, useRef, useEffect} from 'react'\nimport {Carousel, CarouselItem, Row, Col} from 'reactstrap'\nimport {IoMdArrowDown} from 'react-icons/io'\nimport SurveyActions from './SurveyActions'\n\nconst SurveyStep = ({ index, step, state, dispatch }) => {\n    const rootRef = useRef(null)\n    const sentinelRef = useRef(null)\n    const observerRef = useRef(null)\n    const [isSentinelVisible, setSentinelVisibility] = useState(false)\n    const Component = step.component\n\n    useEffect(() => {\n        if (observerRef.current === null) {\n            observerRef.current = new IntersectionObserver(intersectionCallback, { root: rootRef.current })\n        }\n        const observer = observerRef.current\n        observer.observe(sentinelRef.current)\n        return () => observer.disconnect()\n    }, [])\n\n    function intersectionCallback([entry]) {\n        if (entry) {\n            setSentinelVisibility(entry.isIntersecting)\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div ref={rootRef} className=\"survey__right--content\">\n                {/* Dynamic component for this specific survey step. See `SURVEY_STEPS` */}\n                <Component\n                    index={index}\n                    step={step}\n                    state={state.data[index]}\n                    dispatch={dispatch}\n                />\n                {/* We use the sentinel to determine if the content is scrollable\n                    and if it has been scrolled to the bottom */}\n                <div ref={sentinelRef} className=\"survey__sentinel\" />\n            </div>\n\n            {/* Scroll Notifier */}\n            {!isSentinelVisible && (\n                <div className=\"survey__right--scroll\">\n                    Scroll for more\n                    <IoMdArrowDown size=\"16\" />\n                </div>\n            )}\n        </React.Fragment>\n    )\n}\n\nconst Survey = React.memo(({ surveyId, surveySteps }) => {\n    // Survey state\n    const [state, dispatch] = useReducer((state, action) => {\n        switch (action.type) {\n            case 'NEXT':\n                return {...state, currentStep: (state.currentStep + 1) === surveySteps.length ? state.currentStep : state.currentStep + 1}\n            case 'BACK':\n                return {...state, currentStep: state.currentStep === 0 ? state.currentStep : state.currentStep - 1}\n            case 'UPDATE':\n                return {...state, data: {...state.data, [state.currentStep]: action.payload}}\n            case 'CLEAR':\n                const data = state.data\n                delete data[state.currentStep]\n                return {...state, data}\n            default:\n                return state\n        }\n    }, {currentStep: 0, data: {}})\n\n    // Get the current survey step information\n    const currentState = state.data[state.currentStep]\n    const currentStep = surveySteps[state.currentStep]\n\n    // Handle submission of the survey (the final step)\n    function onSubmit() {\n        console.log('survey is going to be submitted')\n        const params = {\n            responses: []\n        }\n        Object.keys(state.data).forEach(key => {\n            params.responses.push(state.data[key])\n        })\n        console.log('sending the following data structure:', params)\n    }\n\n    return (\n        <Row className=\"survey\">\n            {/* Left side (This is outside the carousel) */}\n            <Col md=\"6\" className=\"survey__left\" style={{ backgroundImage: `url(${currentStep.backgroundImage})` }}>\n                <span className=\"survey__left--step\">{state.currentStep + 1}/{surveySteps.length}</span>\n                <h1 className=\"survey__left--title\">{currentStep.questionText}</h1>\n                <p className=\"survey__left--footer\">Complete the survey and get up to 6 months of free, bespoke skincare</p>\n            </Col>\n\n            {/* Right side */}\n            <Col md=\"6\" className=\"survey__right\">\n                {/* Content */}\n                <Carousel\n                    activeIndex={state.currentStep}\n                    next={() => {}}\n                    previous={() => {}}\n                    keyboard={false}\n                    pause={false}\n                    interval={false}\n                >\n                    {surveySteps.map((step, index) => (\n                        <CarouselItem key={index}>\n                            <SurveyStep\n                                index={index}\n                                step={step}\n                                state={state}\n                                dispatch={dispatch}\n                            />\n                        </CarouselItem>\n                    ))}\n                </Carousel>\n\n                {/* Actions */}\n                <SurveyActions\n                    dispatch={dispatch}\n                    canGoBack={state.currentStep > 0}\n                    canGoNext={currentStep.isValid(currentState)}\n                    canClear={currentState !== undefined}\n                    clearText={currentStep.clearText ? currentStep.clearText : 'Clear selection'}\n                    isLastPage={(state.currentStep + 1) === surveySteps.length}\n                    onSubmit={onSubmit}\n                />\n            </Col>\n        </Row>\n    )\n})\n\nexport default Survey\n"]},"metadata":{},"sourceType":"module"}